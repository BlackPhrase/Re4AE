canim_clip::canim_clip(class canim_clip const &)
canim_clip::canim_clip(void)
capplication::capplication(void)
ccamera_base::ccamera_base(class ccamera_base const &)
ccamera_base::ccamera_base(class uobject *,unsigned int)
ccollision_space::ccollision_space(class ccollision_space const &)
ccollision_space::ccollision_space(void)
ccolor_animator_item::ccolor_animator_item(class ccolor_animator_item const &)
ccolor_animator_item::ccolor_animator_item(void)
ccolor_animator_library::ccolor_animator_library(class ccolor_animator_library const &)
ccolor_animator_library::ccolor_animator_library(void)
ccustom_motion::ccustom_motion(class ccustom_motion const &)
ccustom_motion::ccustom_motion(class ccustom_motion *)
ccustom_motion::ccustom_motion(void)
cengine::cengine(class cengine const &)
cengine::cengine(void)
cenv_ambient::cenv_ambient(class cenv_ambient const &)
cenv_ambient::cenv_ambient(void)
cenv_descriptor::cenv_descriptor(class cenv_descriptor const &)
cenv_descriptor::cenv_descriptor(void)
cenv_descriptor_mixer::cenv_descriptor_mixer(class cenv_descriptor_mixer const &)
cenv_descriptor_mixer::cenv_descriptor_mixer(void)
cenv_effect_flares::cenv_effect_flares(class cenv_effect_flares const &)
cenv_effect_flares::cenv_effect_flares(void)
cenv_effect_rain::cenv_effect_rain(class cenv_effect_rain const &)
cenv_effect_rain::cenv_effect_rain(void)
cenv_effect_thunderbolt::cenv_effect_thunderbolt(class cenv_effect_thunderbolt const &)
cenv_effect_thunderbolt::cenv_effect_thunderbolt(void)
cenvelope::cenvelope(class cenvelope const &)
cenvelope::cenvelope(class cenvelope *)
cenvelope::cenvelope(void)
cenvironment::cenvironment(class cenvironment const &)
cenvironment::cenvironment(void)
cform_shape::cform_shape(class cform_shape const &)
cform_shape::cform_shape(class uobject *)
cform_skeleton::cform_skeleton(class cform_skeleton const &)
cform_skeleton::cform_skeleton(class uobject *)
uconsole::cmd_float::cmd_float(class uconsole::cmd_float const &)
uconsole::cmd_float::cmd_float(char const *,float *,float,float)
uconsole::cmd_integer::cmd_integer(class uconsole::cmd_integer const &)
uconsole::cmd_integer::cmd_integer(char const *,int *,int,int)
uconsole::cmd_mask::cmd_mask(class uconsole::cmd_mask const &)
uconsole::cmd_mask::cmd_mask(char const *,struct _flags<unsigned int> *,unsigned int)
uconsole::cmd_token::cmd_token(class uconsole::cmd_token const &)
uconsole::cmd_token::cmd_token(char const *,unsigned int *,struct u_token *)
cobject_animator::cobject_animator(class cobject_animator const &)
cobject_animator::cobject_animator(void)
uconsole::command::command(class uconsole::command const &)
uconsole::command::command(char const *)
comotion::comotion(class comotion const &)
comotion::comotion(class comotion *)
comotion::comotion(void)
cparticle_entity::cparticle_entity(class cparticle_entity const &)
cparticle_entity::cparticle_entity(void)
cperlin_noise1d::cperlin_noise1d(int)
cperlin_noise2d::cperlin_noise2d(int)
cperlin_noise3d::cperlin_noise3d(int)
cperlin_noise_custom::cperlin_noise_custom(int)
csmotion::csmotion(class csmotion const &)
csmotion::csmotion(class csmotion *)
csmotion::csmotion(void)
ctasksheduler::ctasksheduler(class ctasksheduler const &)
ctasksheduler::ctasksheduler(void)
cwindow::cwindow(class cwindow const &)
cwindow::cwindow(void)
engine_camera::engine_camera(void)
engine_wrapper::engine_wrapper(struct engine_wrapper const &)
engine_wrapper::engine_wrapper(void)
event_dispatcher::event_dispatcher(class event_dispatcher const &)
event_dispatcher::event_dispatcher(void)
icollision_form::icollision_form(class icollision_form const &)
icollision_form::icollision_form(class uobject *,enum ecollision_form_type)
iconstructable::iconstructable(class iconstructable const &)
iconstructable::iconstructable(void)
igame_hud::igame_hud(class igame_hud const &)
igame_hud::igame_hud(void)
igame_level::igame_level(class igame_level const &)
igame_level::igame_level(void)
igame_persistent::igame_persistent(class igame_persistent const &)
igame_persistent::igame_persistent(void)
object_follow_animation::object_follow_animation(class uobject *)
pure_relcase::pure_relcase(class pure_relcase const &)
renderable::renderable(class renderable const &)
renderable::renderable(void)
sanim_params::sanim_params(void)
uconsole::server::server(class uconsole::server const &)
uconsole::server::server(void)
uconsole::server_impl::server_impl(class uconsole::server_impl const &)
uconsole::server_impl::server_impl(void)
sheduled_task::sheduled_task(class sheduled_task const &)
sheduled_task::sheduled_task(void)
sound_receiver::sound_receiver(class sound_receiver const &)
sound_receiver::sound_receiver(void)
spatial_entity::spatial_entity(class spatial_entity const &)
spatial_entity::spatial_entity(class uspatial::dbase *)
u_object_container::u_object_container(class u_object_container const &)
u_object_container::u_object_container(void)
ucl_wrapper::ucl_wrapper(void)
uobject::uobject(class uobject const &)
uobject::uobject(void)
canim_clip::~canim_clip(void)
capplication::~capplication(void)
ccamera_base::~ccamera_base(void)
ccollision_space::~ccollision_space(void)
ccolor_animator_item::~ccolor_animator_item(void)
ccolor_animator_library::~ccolor_animator_library(void)
ccustom_motion::~ccustom_motion(void)
cengine::~cengine(void)
cenv_ambient::~cenv_ambient(void)
cenv_descriptor::~cenv_descriptor(void)
cenv_descriptor_mixer::~cenv_descriptor_mixer(void)
cenv_effect_flares::~cenv_effect_flares(void)
cenv_effect_rain::~cenv_effect_rain(void)
cenv_effect_thunderbolt::~cenv_effect_thunderbolt(void)
cenvelope::~cenvelope(void)
cenvironment::~cenvironment(void)
cform_shape::~cform_shape(void)
cform_skeleton::~cform_skeleton(void)
uconsole::cmd_float::~cmd_float(void)
uconsole::cmd_integer::~cmd_integer(void)
uconsole::cmd_mask::~cmd_mask(void)
uconsole::cmd_token::~cmd_token(void)
cobject_animator::~cobject_animator(void)
uconsole::command::~command(void)
comotion::~comotion(void)
cparticle_entity::~cparticle_entity(void)
csmotion::~csmotion(void)
ctasksheduler::~ctasksheduler(void)
cwindow::~cwindow(void)
engine_camera::~engine_camera(void)
engine_wrapper::~engine_wrapper(void)
event_dispatcher::~event_dispatcher(void)
icollision_form::~icollision_form(void)
iconstructable::~iconstructable(void)
igame_hud::~igame_hud(void)
igame_level::~igame_level(void)
igame_persistent::~igame_persistent(void)
object_follow_animation::~object_follow_animation(void)
pure_relcase::~pure_relcase(void)
renderable::~renderable(void)
uconsole::server::~server(void)
uconsole::server_impl::~server_impl(void)
sheduled_task::~sheduled_task(void)
spatial_entity::~spatial_entity(void)
u_object_container::~u_object_container(void)
ucl_wrapper::~ucl_wrapper(void)
uobject::~uobject(void)
class canim_clip & canim_clip::operator=(class canim_clip const &)
class capplication & capplication::operator=(class capplication const &)
class ccamera_base & ccamera_base::operator=(class ccamera_base const &)
class ccollision_space & ccollision_space::operator=(class ccollision_space const &)
class ccolor_animator_item & ccolor_animator_item::operator=(class ccolor_animator_item const &)
class ccolor_animator_library & ccolor_animator_library::operator=(class ccolor_animator_library const &)
class ccustom_motion & ccustom_motion::operator=(class ccustom_motion const &)
class cengine & cengine::operator=(class cengine const &)
class cenv_ambient & cenv_ambient::operator=(class cenv_ambient const &)
class cenv_descriptor & cenv_descriptor::operator=(class cenv_descriptor const &)
class cenv_descriptor_mixer & cenv_descriptor_mixer::operator=(class cenv_descriptor_mixer const &)
class cenv_effect_flares & cenv_effect_flares::operator=(class cenv_effect_flares const &)
class cenv_effect_rain & cenv_effect_rain::operator=(class cenv_effect_rain const &)
class cenv_effect_thunderbolt & cenv_effect_thunderbolt::operator=(class cenv_effect_thunderbolt const &)
class cenv_modifier & cenv_modifier::operator=(class cenv_modifier const &)
class cenvelope & cenvelope::operator=(class cenvelope const &)
class cenvironment & cenvironment::operator=(class cenvironment const &)
class cform_shape & cform_shape::operator=(class cform_shape const &)
class cform_skeleton & cform_skeleton::operator=(class cform_skeleton const &)
class uconsole::cmd_float & uconsole::cmd_float::operator=(class uconsole::cmd_float const &)
class uconsole::cmd_integer & uconsole::cmd_integer::operator=(class uconsole::cmd_integer const &)
class uconsole::cmd_mask & uconsole::cmd_mask::operator=(class uconsole::cmd_mask const &)
class uconsole::cmd_token & uconsole::cmd_token::operator=(class uconsole::cmd_token const &)
class cobject_animator & cobject_animator::operator=(class cobject_animator const &)
class uconsole::command & uconsole::command::operator=(class uconsole::command const &)
class comotion & comotion::operator=(class comotion const &)
class cparticle_entity & cparticle_entity::operator=(class cparticle_entity const &)
class cperlin_noise1d & cperlin_noise1d::operator=(class cperlin_noise1d const &)
class cperlin_noise2d & cperlin_noise2d::operator=(class cperlin_noise2d const &)
class cperlin_noise3d & cperlin_noise3d::operator=(class cperlin_noise3d const &)
class cperlin_noise_custom & cperlin_noise_custom::operator=(class cperlin_noise_custom const &)
class csmotion & csmotion::operator=(class csmotion const &)
class ctasksheduler & ctasksheduler::operator=(class ctasksheduler const &)
class cwindow & cwindow::operator=(class cwindow const &)
class engine_camera & engine_camera::operator=(class engine_camera const &)
struct engine_wrapper & engine_wrapper::operator=(struct engine_wrapper const &)
class event_dispatcher & event_dispatcher::operator=(class event_dispatcher const &)
class icollision_form & icollision_form::operator=(class icollision_form const &)
class iconstructable & iconstructable::operator=(class iconstructable const &)
class igame_hud & igame_hud::operator=(class igame_hud const &)
class igame_level & igame_level::operator=(class igame_level const &)
class igame_persistent & igame_persistent::operator=(class igame_persistent const &)
class object_follow_animation & object_follow_animation::operator=(class object_follow_animation const &)
class pure_relcase & pure_relcase::operator=(class pure_relcase const &)
class renderable & renderable::operator=(class renderable const &)
struct sanim_params & sanim_params::operator=(struct sanim_params const &)
class uconsole::server & uconsole::server::operator=(class uconsole::server const &)
class uconsole::server_impl & uconsole::server_impl::operator=(class uconsole::server_impl const &)
class sheduled_task & sheduled_task::operator=(class sheduled_task const &)
class sound_receiver & sound_receiver::operator=(class sound_receiver const &)
class spatial_entity & spatial_entity::operator=(class spatial_entity const &)
class u_object_container & u_object_container::operator=(class u_object_container const &)
class ucl_wrapper & ucl_wrapper::operator=(class ucl_wrapper const &)
class uobject & uobject::operator=(class uobject const &)
const canim_clip::`vftable'
const ccamera_base::`vftable'
const ccustom_motion::`vftable'
const cenv_effect_flares::`vftable'
const cenvelope::`vftable'
const cform_shape::`vftable'
const cform_skeleton::`vftable'
const uconsole::cmd_float::`vftable'
const uconsole::cmd_integer::`vftable'
const uconsole::cmd_mask::`vftable'
const uconsole::cmd_token::`vftable'
const cobject_animator::`vftable'
const uconsole::command::`vftable'
const comotion::`vftable'
const cparticle_entity::`vftable'{for `renderable'}
const cparticle_entity::`vftable'{for `sheduled_task'}
const cparticle_entity::`vftable'{for `spatial_entity'}
const csmotion::`vftable'
const cwindow::`vftable'
const engine_wrapper::`vftable'{for `urender_debug::engine'}
const engine_wrapper::`vftable'{for `uscript::engine'}
const icollision_form::`vftable'
const iconstructable::`vftable'
const igame_hud::`vftable'
const igame_level::`vftable'{for `iconstructable'}
const igame_level::`vftable'{for `uinput::receiver'}
const igame_persistent::`vftable'
const pure_relcase::`vftable'
const renderable::`vftable'
const uconsole::server::`vftable'
const uconsole::server_impl::`vftable'{for `uinput::receiver'}
const uconsole::server_impl::`vftable'{for `uconsole::server'}
const sheduled_task::`vftable'
const sound_receiver::`vftable'
const spatial_entity::`vftable'
const uobject::`vftable'{for `iconstructable'}
const uobject::`vftable'{for `renderable'}
const uobject::`vftable'{for `sheduled_task'}
const uobject::`vftable'{for `spatial_entity'}
bool uconsole::command::EQ(char const *,char const *)
float ccustom_motion::FPS(void)
unsigned short uobject::ID(void)
class gtl::intrusive_ptr<class urender::object_attach,struct gtl::intrusive_base,class gtl::intrusive_default_functionality> uobject::ROA(void)
void comotion::_evaluate(float,struct _vec3<float> &,struct _vec3<float> &)
void csmotion::_evaluate(int,float,struct _vec3<float> &,struct _vec3<float> &)
bool ccollision_space::_ray_pick(struct _vec3<float> const &,struct _vec3<float> const &,float,enum collide::rq_target,struct collide::rq_result &,class uobject *)
bool ccollision_space::_ray_query(class collide::rq_results &,struct collide::ray_defs const &,bool (*)(struct collide::rq_result &,void *),void *,bool (*)(struct collide::ray_defs const &,class uobject *,void *),class uobject *)
bool cform_shape::_ray_query(struct collide::ray_defs const &,class collide::rq_results &)
bool cform_skeleton::_ray_query(struct collide::ray_defs const &,class collide::rq_results &)
bool ccollision_space::_ray_test(struct _vec3<float> const &,struct _vec3<float> const &,float,enum collide::rq_target,struct collide::ray_cache *,class uobject *)
void event_dispatcher::add(class fastdelegate::FastDelegate0<void> const &,int)
void cform_shape::add_box(struct _matrix<float> &)
void cform_shape::add_sphere(struct _sphere<float> &)
int cenv_effect_flares::append_def(struct uscript::property_holder *,char const *)
int cenv_effect_thunderbolt::append_def(char const *)
class cenv_ambient * cenvironment::append_env_amb(class str_shared const &)
class ccolor_animator_item * ccolor_animator_library::append_item(char const *,class ccolor_animator_item *)
void object_follow_animation::bind(void)
void cenv_effect_thunderbolt::bolt(int,float,float)
class u_vector<struct st_bone_motion> & csmotion::bone_motions(void)
void cenv_effect_rain::born(struct cenv_effect_rain::item &,float)
class _aabb3<float> const & uobject::bounding_box(void)
void ucl_wrapper::box_options(unsigned int)
void ucl_wrapper::box_query(class uspatial::trimodel const *,struct _vec3<float> const &,struct _vec3<float> const &)
void hemisphere::build(int,float,void (*)(float,float,float,float,void *),void *)
void engine_camera::build_precache_frame(void)
void cform_skeleton::build_state(void)
void cform_skeleton::build_top_level(void)
class str_shared uobject::c_name(void)
class str_shared uobject::c_name_sect(void)
void uobject::c_name_sect_set(class str_shared)
void uobject::c_name_set(class str_shared)
class str_shared uobject::c_name_visual(void)
void uobject::c_name_visual_set(class str_shared)
unsigned int ccolor_animator_item::calculate_bgr(float,int &)
unsigned int ccolor_animator_item::calculate_rgb(float,int &)
class ccolor_animator_library canim_lib
void uobject::center(struct _vec3<float> &)
void uobject::cfg_load(char const *)
void uobject::cfg_reload(class u_vector<class std::basic_string<char,struct std::char_traits<char>,class allocator_t<char> > > &)
class icollision_form * uobject::cform(void)
float ccamera_base::check_lim_pitch(void)
float ccamera_base::check_lim_roll(void)
float ccamera_base::check_lim_yaw(void)
void cenv_descriptor_mixer::clear(void)
void cenvelope::clear(void)
void cobject_animator::clear(void)
void comotion::clear(void)
void csmotion::clear(void)
void event_dispatcher::clear(void)
void engine_wrapper::close_file_buffer(void const *)
void uconsole::server_impl::command_add(class uconsole::command *)
void uconsole::server_impl::command_remove(class uconsole::command *)
void cform_shape::compute_bounds(void)
bool cform_shape::contact(struct _sphere<float> const &)
bool cform_shape::contact(class uobject *)
void cenv_descriptor::copy(class cenv_descriptor const &)
void csmotion::copy_motion(class csmotion *)
void cengine::create(void)
void uconsole::server_impl::create(void)
class uobject * u_object_container::create(char const *)
bool engine_wrapper::create_file(int,char const *,void const * const &,unsigned int const &)
void comotion::create_key(float,struct _vec3<float> const &,struct _vec3<float> const &)
void comotion::create_key(enum echannel_type,float,float,float,float,float)
class uobject * igame_level::current_entity(void)
class uobject * igame_level::current_view_entity(void)
class urender::light * spatial_entity::dcast_light(void)
class renderable * cparticle_entity::dcast_renderable(void)
class renderable * spatial_entity::dcast_renderable(void)
class renderable * uobject::dcast_renderable(void)
class sound_receiver * spatial_entity::dcast_sound_receiver(void)
class uobject * spatial_entity::dcast_uobject(void)
class uobject * uobject::dcast_uobject(void)
void uobject::death_effect_enable(void)
void uobject::death_effect_update(float)
void engine_wrapper::debug_camera_position(float *)
struct urender_debug::renderer * engine_wrapper::debug_renderer(void)
void engine_wrapper::debugger_file_path(int,char const *,char *,unsigned int const &)
void ccolor_animator_item::delete_key(int)
void cenvelope::delete_key(float)
void comotion::delete_key(float)
void cengine::destroy(void)
void ctasksheduler::destroy(void)
void cwindow::destroy(void)
void uconsole::server_impl::destroy(void)
void u_object_container::destroy(class uobject *)
struct _vec3<float> & uobject::direction(void)
struct _vec3<float> const & uobject::direction(void)
void igame_persistent::disconnect(void)
void event_dispatcher::dispatch(void)
void engine_wrapper::draw_lines(int,struct urender_debug::debug_vertex *,int,unsigned short *)
void engine_wrapper::draw_triangles(int,struct urender_debug::debug_vertex *)
void ed_set_object_pos(class uobject *,struct _vec3<float> const &)
void ed_set_object_rot(class uobject *,struct _vec3<float> const &)
class cengine engine
struct engine_wrapper & engine_wrapper_instance(void)
void ctasksheduler::ensure_order(class sheduled_task *,class sheduled_task *)
void uconsole::server_impl::enumerate(class fastdelegate::FastDelegate<void (class uconsole::command *)>)
class cenvelope * comotion::envelope(enum echannel_type)
bool canim_clip::equal(class canim_clip *)
float cenvelope::evaluate(float)
void uconsole::cmd_float::execute(char const *)
void uconsole::cmd_integer::execute(char const *)
void uconsole::cmd_mask::execute(char const *)
void uconsole::cmd_token::execute(char const *)
void uconsole::server_impl::execute(char const *)
void uconsole::server_impl::execute_command(void)
void uconsole::server_impl::execute_script(char const *)
bool engine_wrapper::file_exists(int,char const *)
char const * engine_wrapper::file_name(int,char const *,char *,unsigned int)
struct st_bone_motion * csmotion::find_bone_motion(class str_shared)
class ccolor_animator_item * ccolor_animator_library::find_item(char const *)
class std::_Vector_iterator<class ccolor_animator_item *,class allocator_t<class ccolor_animator_item *> > ccolor_animator_library::find_itemi(char const *)
class std::_Vector_iterator<struct st_key *,class allocator_t<struct st_key *> > cenvelope::find_key(float,float)
void cenvelope::find_nearest_key(float,class std::_Vector_iterator<struct st_key *,class allocator_t<struct st_key *> > &,class std::_Vector_iterator<struct st_key *,class allocator_t<struct st_key *> > &,float)
void comotion::find_nearest_key(float,float &,float &,float)
class uobject * u_object_container::find_object_by_clsid(class str_shared)
class uobject * u_object_container::find_object_by_name(char const *)
class uobject * u_object_container::find_object_by_name(class str_shared)
int ccolor_animator_item::first_key_frame(void)
void uobject::force_transform(struct _matrix<float> const &)
float sanim_params::frame(void)
int ccustom_motion::frame_end(void)
void cengine::frame_move(void)
int ccustom_motion::frame_start(void)
void igame_level::free_id(unsigned short)
void engine_wrapper::frustum(float *,float *,float,float,void (*)(struct uai::npc *,void *),void *)
void ucl_wrapper::frustum_options(unsigned int)
void ucl_wrapper::frustum_query(class uspatial::trimodel const *,class ufrustum const &)
class capplication * g_app
class urender::backend * g_backend
struct _flags<unsigned int> g_commonflags
struct uscript::property_holder * g_config
class uconsole::server * g_console
class urender::draw_utils * g_du
int g_editor
class igame_level * g_game_level
class igame_persistent * g_game_persistent
struct uinput::manager * g_input
int g_present_mode
class urender::manager * g_render
struct usound::manager * g_sound
class uspatial::dbase * g_spatial_space
class uspatial::dbase * g_spatial_space_physic
unsigned int igame_persistent::game_type(void)
unsigned short igame_level::gen_id(void)
void ccamera_base::get(struct _vec3<float> &,struct _vec3<float> &,struct _vec3<float> &)
float cperlin_noise1d::get(float)
float cperlin_noise2d::get(float,float)
float cperlin_noise3d::get(float,float,float)
class _aabb3<float> const & icollision_form::get_bbox(void)
bool uconsole::server_impl::get_bool(char const *,bool &)
class _aabb3<float> const & ccollision_space::get_bounding_volume(void)
bool uobject::get_destroy(void)
bool uobject::get_enabled(void)
float uconsole::server_impl::get_float(char const *,float &,float &,float &)
int uconsole::server_impl::get_integer(char const *,int &,int &,int &)
class ccolor_animator_item const * ccolor_animator_library::get_item(char const *)
unsigned int * ccolor_animator_item::get_key(int)
float cenvelope::get_length(float *,float *)
float cobject_animator::get_length(void)
float comotion::get_length(float *,float *)
float const uconsole::cmd_float::get_max(void)
int const uconsole::cmd_integer::get_max(void)
float const uconsole::cmd_float::get_min(void)
int const uconsole::cmd_integer::get_min(void)
struct _flags<unsigned char> csmotion::get_motion_flags(int)
int ccollision_space::get_nearest(class u_vector<class uobject *> &,struct _vec3<float> const &,float,class uobject *)
float icollision_form::get_radius(void)
bool uobject::get_readonly(void)
struct urender_debug::renderer * engine_wrapper::get_renderer(void)
struct cenv_ambient::seffect * cenv_ambient::get_rnd_effect(void)
unsigned int cenv_ambient::get_rnd_effect_time(void)
struct sound * cenv_ambient::get_rnd_sound(void)
unsigned int cenv_ambient::get_rnd_sound_time(void)
bool uobject::get_selected(void)
struct _sphere<float> const & icollision_form::get_sphere(void)
class uspatial::trimodel * ccollision_space::get_static_model(void)
struct uspatial::triangle * ccollision_space::get_static_tris(void)
struct _vec3<float> * ccollision_space::get_static_verts(void)
char * uconsole::server_impl::get_string(char const *)
struct u_token * uconsole::cmd_token::get_token(void)
char * uconsole::server_impl::get_token(char const *)
float const uconsole::cmd_float::get_value(void)
int const uconsole::cmd_integer::get_value(void)
bool const uconsole::cmd_mask::get_value(void)
bool uobject::get_visible(void)
class str_shared cenvironment::get_weather(void)
float ccamera_base::get_world_pitch(void)
float ccamera_base::get_world_yaw(void)
void uobject::h_add_child(class uobject *)
class uobject * uobject::h_parent(void)
class uobject const * uobject::h_parent(void)
void uobject::h_remove_child(class uobject *,bool)
class uobject * uobject::h_root(void)
class uobject const * uobject::h_root(void)
class uobject * uobject::h_set_parent(class uobject *)
bool uobject::has_rootmover(void)
void uconsole::server_impl::hide(void)
void cenv_effect_rain::hit(struct _vec3<float> &)
int hemisphere::indices(int,unsigned short const * &)
void uconsole::cmd_float::info(char (&)[256])
void uconsole::cmd_integer::info(char (&)[256])
void uconsole::cmd_mask::info(char (&)[256])
void uconsole::cmd_token::info(char (&)[256])
void uconsole::command::info(char (&)[256])
void cperlin_noise1d::init(void)
void cperlin_noise2d::init(void)
void cperlin_noise3d::init(void)
void engine_wrapper::init_debug(void)
void engine_wrapper::init_debug_renderer(void)
void ccolor_animator_item::init_default(void)
void ctasksheduler::initialize(void)
void cwindow::initialize(unsigned int,unsigned int,bool,struct HWND__ *,struct HWND__ *)
void ccolor_animator_item::insert_key(int,unsigned int)
class std::_Vector_iterator<struct st_key *,class allocator_t<struct st_key *> > cenvelope::insert_key(float,float)
void ctasksheduler::internal_register(class sheduled_task *,bool)
void ctasksheduler::internal_registration(void)
void ctasksheduler::internal_unregister(class sheduled_task *,bool)
unsigned int ccolor_animator_item::interpolate_bgr(int)
unsigned int ccolor_animator_item::interpolate_rgb(int)
void uconsole::command::invalid_syntax(void)
void cenv_effect_flares::invalidate(void)
void cenvironment::invalidate(void)
bool ccolor_animator_item::is_key(int)
bool cobject_animator::is_playing(void)
bool cenvironment::is_wfxplaying(void)
class u_vector<class ccolor_animator_item *> & ccolor_animator_library::items(void)
int comotion::key_count(void)
int ccolor_animator_item::last_key_frame(void)
int ccustom_motion::length(void)
unsigned int ccolor_animator_item::length_ms(void)
float ccolor_animator_item::length_sec(void)
void cenv_descriptor_mixer::lerp(class cenvironment *,class cenv_descriptor &,class cenv_descriptor &,float,class cenv_modifier &,float)
class str_shared igame_level::level_path(void)
bool canim_clip::load(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void ccollision_space::load(void)
void ccolor_animator_item::load(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void ccolor_animator_library::load(char const *)
bool ccustom_motion::load(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void cenv_ambient::load(class str_shared const &)
void cenv_descriptor::load(char const *,char const *,class cenvironment *)
void cenv_modifier::load(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void cenvironment::load(void)
void cobject_animator::load(char const *)
bool comotion::load(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
bool csmotion::load(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void igame_hud::load(void)
bool igame_level::load(class str_shared)
void u_object_container::load(void)
void cenvelope::load_1(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void cenvelope::load_2(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void capplication::load_begin(void)
void capplication::load_end(void)
bool igame_level::load_game_specific_after(void)
bool igame_level::load_game_specific_before(void)
bool comotion::load_motion(char const *)
bool csmotion::load_motion(char const *)
void cobject_animator::load_motions(char const *)
void capplication::load_title(char *,char *)
void cenvelope::loada(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
bool cparticle_entity::locked(void)
void engine_wrapper::log(int,int,char const *)
void cenvironment::mods_load(void)
void cenvironment::mods_unload(void)
void ccamera_base::move(int,float,float)
void ccolor_animator_item::move_key(int,int)
class str_shared ccolor_animator_item::name(void)
char const * ccustom_motion::name(void)
class str_shared const & cenv_ambient::name(void)
char const * cobject_animator::name(void)
char const * uconsole::command::name(void)
class str_shared igame_level::name(void)
void uobject::net_destroy(void)
unsigned int u_object_container::net_export(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>,unsigned int,unsigned int)
class uobject * u_object_container::net_find(unsigned int)
void u_object_container::net_import(class gtl::intrusive_ptr<class vfs::ireader,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void u_object_container::net_register(class uobject *)
void uobject::net_relcase(class uobject *)
bool uobject::net_spawn(void)
void igame_level::net_stop(void)
void u_object_container::net_unregister(class uobject *)
int ccolor_animator_item::next_key_frame(int)
float cperlin_noise1d::noise(float)
float cperlin_noise2d::noise(struct _vec2<float> const &)
float cperlin_noise3d::noise(struct _vec3<float> const &)
void cperlin_noise2d::normalize(float * const)
void cperlin_noise3d::normalize(float * const)
bool comotion::normalize_keys(float,float,float)
float cenvironment::normalize_time(float)
void u_object_container::o_activate(class uobject *)
unsigned int u_object_container::o_count(void)
class uobject * u_object_container::o_get_by_iterator(unsigned int)
void u_object_container::o_remove(class u_vector<class uobject *> &,class uobject *)
void u_object_container::o_sleep(class uobject *)
void ccamera_base::on_activate(class ccamera_base *)
void uobject::on_after_chield(void)
void uobject::on_after_independent(void)
void igame_persistent::on_app_activate(void)
void igame_persistent::on_app_deactivate(void)
void igame_persistent::on_app_end(void)
void igame_persistent::on_app_start(void)
void uobject::on_before_chield(void)
void uobject::on_before_independent(void)
void uobject::on_change_visual(void)
void ccamera_base::on_deactivate(void)
void cenv_effect_flares::on_device_create(void)
void cenvironment::on_device_create(void)
void cenv_effect_flares::on_device_destroy(void)
void cenvironment::on_device_destroy(void)
void capplication::on_disconnect(void)
void uobject::on_editor_render(bool)
void capplication::on_frame(void)
void cenv_effect_flares::on_frame(int)
void cenv_effect_rain::on_frame(void)
void cenv_effect_thunderbolt::on_frame(int,float,float)
void cenvironment::on_frame(void)
void igame_hud::on_frame(void)
void igame_level::on_frame(void)
void igame_persistent::on_frame(void)
void uconsole::server_impl::on_frame(void)
void igame_persistent::on_game_end(void)
void igame_persistent::on_game_start(void)
void uconsole::server_impl::on_press_key(int,bool)
void capplication::on_quit(void)
void igame_level::on_render(void)
void uconsole::server_impl::on_render(void)
void cengine::on_window_activate(bool)
void const * engine_wrapper::open_file_buffer(int,char const *,void const * &,unsigned int &)
void cenvelope::optimize(void)
void csmotion::optimize(void)
class uobject * icollision_form::owner(void)
struct cenv_effect_rain::particle * cenv_effect_rain::p_allocate(void)
void cenv_effect_rain::p_create(void)
void cenv_effect_rain::p_destroy(void)
void cenv_effect_rain::p_free(struct cenv_effect_rain::particle *)
void cenv_effect_rain::p_insert(struct cenv_effect_rain::particle *,struct cenv_effect_rain::particle * &)
void cenv_effect_rain::p_remove(struct cenv_effect_rain::particle *,struct cenv_effect_rain::particle * &)
int cenv_effect_rain::p_size(struct cenv_effect_rain::particle *)
void cengine::pause(bool)
void cobject_animator::pause(bool)
void sanim_params::pause(bool)
bool cengine::paused(void)
class comotion * cobject_animator::play(bool,char const *)
void sanim_params::play(void)
void ctasksheduler::pop(void)
struct _vec3<float> & uobject::position(void)
struct _vec3<float> const & uobject::position(void)
void cengine::pre_cache(unsigned int)
void cengine::prefetch_load(void)
void cengine::prefetch_register(char const *,char const *)
void cengine::prefetch_save(void)
int ccolor_animator_item::prev_key_frame(int)
void ctasksheduler::process_step(void)
void uobject::processing_activate(void)
void uobject::processing_deactivate(void)
bool uobject::processing_enabled(void)
float ps_cam_inert
float ps_cam_slide_inert
struct _flags<unsigned int> ps_hud_flags
float ps_hud_fov
bool cparticle_entity::psi_alive(void)
void cparticle_entity::psi_destroy(void)
void cparticle_entity::psi_internal_delete(void)
bool cparticle_entity::psi_is_automatic(void)
void cparticle_entity::psi_set_life_time(float)
void ctasksheduler::push(struct ctasksheduler::item &)
struct uspatial::result * ucl_wrapper::r_begin(void)
void ucl_wrapper::r_clear(void)
int ucl_wrapper::r_count(void)
unsigned int r_current_mode
struct uspatial::result * ucl_wrapper::r_end(void)
void uconsole::server_impl::r_on_key_hold(int,int,int)
void uconsole::server_impl::r_on_key_press(int,int,int)
void uconsole::server_impl::r_on_key_release(int,int,int)
void uconsole::server_impl::r_on_mouse_move(int,int,int,int)
int r_supersample
float r_view_distance
float uobject::radius(void)
void ucl_wrapper::ray_options(unsigned int)
bool ccollision_space::ray_pick(struct _vec3<float> const &,struct _vec3<float> const &,float,enum collide::rq_target,struct collide::rq_result &,class uobject *)
bool cenv_effect_rain::ray_pick(struct _vec3<float> const &,struct _vec3<float> const &,float &,enum collide::rq_target)
bool cenv_effect_thunderbolt::ray_pick(struct _vec3<float> const &,struct _vec3<float> const &,float &)
bool ccollision_space::ray_query(class collide::rq_results &,struct collide::ray_defs const &,bool (*)(struct collide::rq_result &,void *),void *,bool (*)(struct collide::ray_defs const &,class uobject *,void *),class uobject *)
bool ccollision_space::ray_query(class collide::rq_results &,class icollision_form *,struct collide::ray_defs const &)
void ucl_wrapper::ray_query(class uspatial::trimodel const *,struct _vec3<float> const &,struct _vec3<float> const &,float)
bool ccollision_space::ray_test(struct _vec3<float> const &,struct _vec3<float> const &,float,enum collide::rq_target,struct collide::ray_cache *,class uobject *)
int engine_wrapper::raytrace(struct uai::poly *,float *,struct uai::npc *,float *,struct uai::npc *)
void ctasksheduler::register_(class sheduled_task *,bool)
void u_object_container::relcase_register(class fastdelegate::FastDelegate1<class uobject *,void>,int *)
void u_object_container::relcase_unregister(int *)
void cenvironment::reload(void)
void event_dispatcher::remove(class fastdelegate::FastDelegate0<void> const &)
void cenv_effect_flares::render(bool,bool,bool)
void cenv_effect_rain::render(void)
void cenv_effect_thunderbolt::render(void)
void cenvironment::render_flares(void)
void igame_hud::render_hud(void)
void cenvironment::render_last(void)
class uobject * renderable::renderable_dcast_uobject(void)
class uobject * uobject::renderable_dcast_uobject(void)
void uobject::renderable_render(void)
class gtl::intrusive_ptr<class urender::object_attach,struct gtl::intrusive_base,class gtl::intrusive_default_functionality> renderable::renderable_roa(void)
bool renderable::renderable_shadow_generate(void)
bool uobject::renderable_shadow_generate(void)
void cenv_effect_rain::renew_item(struct cenv_effect_rain::item &,float,bool)
void cengine::reset(void)
void ccolor_animator_item::resize(int)
void cwindow::resize(unsigned int,unsigned int,bool)
void cenvelope::rotate_keys(float)
void cengine::run(void)
void cengine::run_prepare(void)
void cengine::run_unprepare(void)
void cengine::run_update(void)
void canim_clip::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void ccolor_animator_item::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void ccolor_animator_library::save(char const *)
void ccustom_motion::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void cenvelope::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void uconsole::command::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void comotion::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void csmotion::save(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
void comotion::save_motion(char const *)
void csmotion::save_motion(char const *)
void cenvelope::savea(class gtl::intrusive_ptr<class vfs::iwriter,struct gtl::intrusive_base,class gtl::intrusive_default_functionality>)
bool cenvelope::scale_keys(float,float,float,float)
bool comotion::scale_keys(float,float,float)
class urender::sector * uobject::sector(void)
void uconsole::server_impl::select_command(void)
void cenvironment::select_env(class u_vector<class cenv_descriptor *> *,class cenv_descriptor * &,float)
void cenvironment::select_envs(class u_vector<class cenv_descriptor *> *,class cenv_descriptor * &,class cenv_descriptor * &,float)
void cenvironment::select_envs(float)
void ccamera_base::set(struct _vec3<float> const &,struct _vec3<float> const &,struct _vec3<float> const &)
void ccamera_base::set(float,float,float)
void sanim_params::set(float,float,float)
void sanim_params::set(class ccustom_motion *)
void cobject_animator::set_active_motion(class comotion *)
void cperlin_noise_custom::set_amplitude(float)
void uobject::set_destroy(bool)
void uobject::set_enabled(bool)
void igame_level::set_entity(class uobject *)
void cperlin_noise_custom::set_frequency(float)
void cenvironment::set_game_time(float,float)
void uobject::set_id(unsigned short)
void ccustom_motion::set_name(char const *)
void cperlin_noise_custom::set_octaves(int)
void ccustom_motion::set_param(int,int,float)
void cperlin_noise_custom::set_params(int,float,float)
void ccamera_base::set_parent(class uobject *)
void uobject::set_readonly(bool)
void uobject::set_selected(bool)
void igame_level::set_view_entity(class uobject *)
void uobject::set_visible(bool)
void cenvironment::set_weather(class str_shared,bool)
bool cenvironment::set_weather_fx(class str_shared)
class u_vector<struct cform_shape::shape_def> & cform_shape::shapes(void)
void sheduled_task::shedule_register(void)
void sheduled_task::shedule_unregister(void)
float uobject::sheduler_frequency(void)
class str_shared cparticle_entity::sheduler_name(void)
class str_shared sheduled_task::sheduler_name(void)
class str_shared uobject::sheduler_name(void)
void cparticle_entity::sheduler_update(unsigned int)
void sheduled_task::sheduler_update(unsigned int)
void uobject::sheduler_update(unsigned int)
void uconsole::server_impl::show(void)
void u_object_container::single_update(class uobject *)
void csmotion::sort_bones_by_skeleton(class u_vector<class cbone *> &)
bool cenvironment::sort_env_etl_pred(class cenv_descriptor const *,class cenv_descriptor const *)
bool cenvironment::sort_env_pred(class cenv_descriptor const *,class cenv_descriptor const *)
void * engine_wrapper::sound_create(char const *,struct uai::game_object *,class gtl::intrusive_ptr<struct uai::sound_user_data,struct uai::sound_user_data_base,class gtl::intrusive_default_functionality>)
void engine_wrapper::sound_destroy(void * &)
void igame_level::sound_event_dispatch(void)
void igame_level::sound_event_register(struct usound::event const &)
bool engine_wrapper::sound_exist(char const *)
void * engine_wrapper::sound_feedback(void *)
char const * engine_wrapper::sound_file_name(char const *,char *,unsigned int)
unsigned int engine_wrapper::sound_length_ms(void *)
void engine_wrapper::sound_play(void *,float *,bool,bool)
void engine_wrapper::sound_position(void *,float *)
void sound_receiver::sound_receiver_event(struct usound::event const &,float)
void engine_wrapper::sound_stop(void *)
void capplication::sound_update(void)
void uobject::spatial_move(void)
void uobject::spatial_register(void)
void uobject::spatial_unregister(void)
void uobject::spatial_update(float,float)
float & cobject_animator::speed(void)
void capplication::start(char const *)
void igame_persistent::start(char const *)
void uconsole::cmd_float::status(char (&)[256])
void uconsole::cmd_integer::status(char (&)[256])
void uconsole::cmd_mask::status(char (&)[256])
void uconsole::cmd_token::status(char (&)[256])
void uconsole::command::status(char (&)[256])
void cobject_animator::stop(void)
void sanim_params::stop(void)
void cenvironment::stop_wfx(void)
float cenv_modifier::sum(class cenv_modifier &,struct _vec3<float> &)
void engine_wrapper::surface(float *,struct uai::npc *)
void cengine::switch_to_edit_mode(void)
float cenvironment::time_diff(float,float)
unsigned int engine_wrapper::time_global_ms(void)
float cenvironment::time_weight(float,float,float)
struct ctasksheduler::item & ctasksheduler::top(void)
enum ecollision_form_type const icollision_form::type(void)
class ucl_wrapper ucollider
void object_follow_animation::unbind(void)
void ccolor_animator_library::unload(void)
void cenvironment::unload(void)
void u_object_container::unload(void)
void ctasksheduler::unregister_(class sheduled_task *)
void ccamera_base::update(struct _vec3<float> &,struct _vec3<float> &)
void cobject_animator::update(float)
void ctasksheduler::update(void)
void object_follow_animation::update(void)
void sanim_params::update(float,float,bool)
void u_object_container::update(void)
void uobject::update_cl(void)
bool cform_shape::valid(void)
bool cform_skeleton::valid(void)
int hemisphere::vertices(int,struct _vec3<float> const * &)
class gtl::intrusive_ptr<class urender::model,struct gtl::intrusive_base,class gtl::intrusive_default_functionality> uobject::visual(void)
void csmotion::world_rotate(int,float,float,float)
struct _matrix<float> const & cobject_animator::xform(void)
struct _matrix<float> & uobject::xform(void)
struct _matrix<float> const & uobject::xform(void)
